---
description: Best practices for implementing server actions in Next.js with validation and structure.
globs: 
alwaysApply: true
---
# Server Actions

## Format and Structure
Server actions should follow this format:

Files:
- `apps/web/utils/actions/NAME.validation.ts`
- `apps/web/utils/actions/NAME.ts`

For `apps/web/utils/actions/NAME.validation.ts`:

```typescript
import { z } from "zod";

export const exampleActionBody = z.object({ name: z.string() });
export type ExampleActionBody = z.infer<typeof exampleActionBody>;
```

For `apps/web/utils/actions/NAME.ts`:

```typescript
'use server';

import { revalidatePath } from "next/cache";
import { exampleActionBody, type ExampleActionBody } from "@/utils/actions/example.validation";

export const exampleAction = async (unsafeData: ExampleActionBody) => {
  const { data, success, error } = exampleActionBody.safeParse(unsafeData);
  if (!success) return { error: error.message };

  // Perform server-side logic here, e.g., database update
  console.log("Server action executed", data);

  revalidatePath("/some-path");
  return { success: true };
};
```

## Implementation Guidelines
- Implement type-safe server actions with proper validation
- Define input schemas using Zod for robust type checking and validation
- Handle errors gracefully and return appropriate responses
- Ensure all server actions return the `Promise<ServerActionResponse>` type
- The zod schema will also be used on the client for form validation.