---
description: Guidelines for UI components and styling using Shadcn UI, Radix UI, and Tailwind CSS.
globs: 
alwaysApply: true
---
# UI Components and Styling

## UI Framework
- Use Shadcn UI and Tailwind for components and styling
- Implement responsive design with Tailwind CSS using a mobile-first approach
- Use `next/image` package for images

## Styling

### Use Tailwind CSS with the `cn()` utility for class merging
- Import `cn` from `@/utils/cn` for conditional and merged class names
- The `cn()` utility combines `clsx` and `tailwind-merge` for optimal class handling

```tsx
import { cn } from '@/utils/cn';

// Basic usage
<div className={cn('base-classes', 'conditional-classes')} />

// Conditional classes
<div className={cn(
  'px-4 py-2 rounded-md',
  isActive && 'bg-blue-500 text-white',
  isDisabled && 'opacity-50 cursor-not-allowed'
)} />

// Merging conflicting Tailwind classes
<div className={cn(
  'px-4 py-2',        // Base padding
  'px-6',             // Override padding-x (tailwind-merge handles this)
  variant === 'large' && 'py-4'
)} />
```

### Component Styling Patterns

#### Variant-Based Styling
Use object maps for component variants:

```tsx
import { cn } from '@/utils/cn';

const buttonVariants = {
  variant: {
    default: 'bg-primary text-primary-foreground hover:bg-primary/90',
    destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
    outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
    secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
    ghost: 'hover:bg-accent hover:text-accent-foreground',
    link: 'text-primary underline-offset-4 hover:underline',
  },
  size: {
    default: 'h-10 px-4 py-2',
    sm: 'h-9 rounded-md px-3',
    lg: 'h-11 rounded-md px-8',
    icon: 'h-10 w-10',
  },
};

interface ButtonProps {
  variant?: keyof typeof buttonVariants.variant;
  size?: keyof typeof buttonVariants.size;
  className?: string;
  children: React.ReactNode;
}

export function Button({ variant = 'default', size = 'default', className, children }: ButtonProps) {
  return (
    <button
      className={cn(
        'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
        buttonVariants.variant[variant],
        buttonVariants.size[size],
        className
      )}
    >
      {children}
    </button>
  );
}
```

#### Responsive Design Patterns
Use Tailwind's mobile-first approach:

```tsx
<div className={cn(
  // Mobile (default)
  'flex flex-col space-y-4 p-4',
  // Tablet
  'md:flex-row md:space-y-0 md:space-x-6 md:p-6',
  // Desktop
  'lg:p-8 xl:max-w-6xl xl:mx-auto'
)} />
```

#### State-Based Styling
Handle interactive states consistently:

```tsx
<button className={cn(
  // Base styles
  'px-4 py-2 rounded-md transition-colors',
  // Default state
  'bg-blue-500 text-white',
  // Hover state
  'hover:bg-blue-600',
  // Focus state
  'focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2',
  // Disabled state
  'disabled:opacity-50 disabled:cursor-not-allowed',
  // Active state
  'active:bg-blue-700'
)} />
```

### Design System Integration

#### Using Shadcn UI Components
Always extend Shadcn components rather than replacing them:

```tsx
import { Button } from '@/components/ui/button';
import { cn } from '@/utils/cn';

// ✅ Good: Extending Shadcn component
export function CustomButton({ className, ...props }: ButtonProps) {
  return (
    <Button
      className={cn('custom-styles', className)}
      {...props}
    />
  );
}

// ❌ Bad: Recreating Shadcn functionality
export function CustomButton({ className, ...props }: ButtonProps) {
  return (
    <button
      className={cn('inline-flex items-center...', className)}
      {...props}
    />
  );
}
```

#### CSS Custom Properties for Theming
Use CSS variables for consistent theming:

```tsx
// In your component
<div className={cn(
  'bg-background text-foreground',
  'border border-border',
  'shadow-sm'
)} />

// CSS variables are defined in globals.css
// --background, --foreground, --border are automatically handled by Shadcn
```

### Best Practices

#### Class Organization
Order Tailwind classes consistently:

```tsx
// ✅ Good: Logical grouping
<div className={cn(
  // Layout
  'flex items-center justify-between',
  // Spacing
  'px-4 py-2 gap-2',
  // Sizing
  'w-full h-10',
  // Appearance
  'bg-white border border-gray-200 rounded-md',
  // Typography
  'text-sm font-medium text-gray-900',
  // States
  'hover:bg-gray-50 focus:outline-none focus:ring-2',
  // Custom/conditional
  className
)} />
```

#### Avoiding Style Conflicts
Let `cn()` handle Tailwind conflicts:

```tsx
// ✅ Good: cn() will merge conflicting classes properly
<div className={cn(
  'p-4',           // Base padding
  'px-6',          // Override horizontal padding
  large && 'p-8'   // Conditional override
)} />

// ❌ Bad: Manual conflict resolution
<div className={large ? 'p-8' : 'p-4 px-6'} />
```

#### Component Composition
Build complex components by composing simpler ones:

```tsx
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { cn } from '@/utils/cn';

export function ProductCard({ product, className }: ProductCardProps) {
  return (
    <Card className={cn('overflow-hidden', className)}>
      <CardHeader>
        <CardTitle>{product.name}</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <p className="text-muted-foreground">{product.description}</p>
        <Button className="w-full">Add to Cart</Button>
      </CardContent>
    </Card>
  );
}
```

## Install new Shadcn components

```sh
pnpm dlx shadcn@latest add COMPONENT
```

Example:

```sh
pnpm dlx shadcn@latest add progress
```

## Common Patterns

### Loading States
```tsx
<Button disabled={isLoading} className={cn('min-w-[100px]')}>
  {isLoading ? (
    <div className="flex items-center gap-2">
      <div className="h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent" />
      Loading...
    </div>
  ) : (
    'Submit'
  )}
</Button>
```

### Error States
```tsx
<div className={cn(
  'rounded-md p-4',
  hasError ? 'bg-destructive/15 border border-destructive/20' : 'bg-muted'
)}>
  <p className={cn(
    'text-sm',
    hasError ? 'text-destructive' : 'text-muted-foreground'
  )}>
    {hasError ? errorMessage : 'All good!'}
  </p>
</div>
```

### Form Styling
```tsx
<div className="space-y-4">
  <div className="space-y-2">
    <label className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
      Email
    </label>
    <input
      className={cn(
        'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background',
        'file:border-0 file:bg-transparent file:text-sm file:font-medium',
        'placeholder:text-muted-foreground',
        'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
        'disabled:cursor-not-allowed disabled:opacity-50'
      )}
      placeholder="Enter your email"
    />
  </div>
</div>
```