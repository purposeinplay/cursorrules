---
description: Git workflow guidelines including commit conventions, branch naming, and changelog management.
globs: 
alwaysApply: true
---
# Version Control & Git Workflow

## Commit Message Convention (Conventional Commits)

### AI Instruction
**IMPORTANT**: When creating commits, AI assistants MUST follow the Conventional Commits specification. Always structure commit messages according to these rules.

### Commit Message Format
```
<type>(<scope>): <subject>

<body>

<footer>
```

### Types
- **feat**: New feature for the user
- **fix**: Bug fix for the user
- **docs**: Documentation only changes
- **style**: Changes that do not affect the meaning of the code (formatting, missing semi-colons, etc)
- **refactor**: Code change that neither fixes a bug nor adds a feature
- **perf**: Code change that improves performance
- **test**: Adding missing tests or correcting existing tests
- **build**: Changes that affect the build system or external dependencies
- **ci**: Changes to CI configuration files and scripts
- **chore**: Other changes that don't modify src or test files
- **revert**: Reverts a previous commit

### Examples
```bash
# ✅ Good commit messages
feat(auth): add OAuth2 integration with Google
fix(ui): resolve button alignment issue on mobile devices
docs(api): update REST API documentation for v2 endpoints
refactor(products): simplify product filtering logic
perf(images): implement lazy loading for product images
test(auth): add unit tests for login functionality
build(deps): upgrade Next.js to version 14.2.0
chore(config): update ESLint rules for TypeScript

# ❌ Bad commit messages
Fixed stuff
Update index.tsx
WIP
Minor changes
```

### Commit Message Rules
1. **Subject line**: Max 72 characters, imperative mood, no period
2. **Scope**: Optional, indicates the section of the codebase
3. **Body**: Explain what and why, not how (wrap at 72 chars)
4. **Footer**: Reference issues, breaking changes

### Breaking Changes
```bash
feat(api)!: change authentication endpoint structure

BREAKING CHANGE: Authentication endpoint moved from /api/auth to /api/v2/auth.
All clients must update their API calls.

Closes #123
```

## Branch Naming Convention

### Branch Types
```bash
# Feature branches
feature/add-user-authentication
feature/JIRA-123-payment-integration

# Bug fix branches
fix/resolve-login-error
fix/JIRA-456-cart-calculation

# Hotfix branches (production fixes)
hotfix/critical-security-patch
hotfix/payment-gateway-error

# Release branches
release/v1.2.0
release/2024-Q1

# Other branches
chore/update-dependencies
docs/api-documentation
refactor/optimize-database-queries
```

### Branch Rules
- ✅ Use lowercase and hyphens (kebab-case)
- ✅ Include ticket/issue number when applicable
- ✅ Keep names descriptive but concise
- ✅ Delete branches after merging
- ❌ Avoid personal names or unclear abbreviations

## Git Workflow (Git Flow)

### Main Branches
- **main/master**: Production-ready code
- **develop**: Integration branch for features
- **staging**: Pre-production testing (optional)

### Workflow Steps
1. Create feature branch from `develop`
2. Make commits following Conventional Commits
3. Push branch and create Pull Request
4. Code review and approval
5. Merge to `develop`
6. Deploy to staging for testing
7. Create release branch
8. Merge to `main` for production

### Pull Request Template
```markdown
## Description
Brief description of changes

## Type of Change
- [ ] Bug fix (non-breaking change)
- [ ] New feature (non-breaking change)
- [ ] Breaking change
- [ ] Documentation update

## Testing
- [ ] Unit tests pass
- [ ] Integration tests pass
- [ ] Manual testing completed

## Checklist
- [ ] Code follows style guidelines
- [ ] Self-review completed
- [ ] Comments added for complex code
- [ ] Documentation updated
- [ ] No new warnings generated
- [ ] Changelog updated (if applicable)

## Related Issues
Closes #(issue number)

## Screenshots (if applicable)
```

## Changelog Management (Keep a Changelog)

### Changelog Format
Follow the [Keep a Changelog](mdc:https:/keepachangelog.com) standard:

```markdown
# Changelog
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](mdc:https:/keepachangelog.com/en/1.0.0),
and this project adheres to [Semantic Versioning](mdc:https:/semver.org/spec/v2.0.0.html).

## [Unreleased]
### Added
- New features that have been added

### Changed
- Changes in existing functionality

### Deprecated
- Features that will be removed in upcoming releases

### Removed
- Features that have been removed

### Fixed
- Any bug fixes

### Security
- Security vulnerability fixes

## [1.2.0] - 2024-01-15
### Added
- OAuth2 integration with Google (#123)
- User profile customization options (#124)

### Fixed
- Resolved cart calculation error on mobile (#125)
- Fixed memory leak in product listing (#126)

### Security
- Updated dependencies to patch CVE-2024-1234
```

### Changelog Rules
1. **Update with each PR**: Add entry to Unreleased section
2. **Group by type**: Use standard categories (Added, Changed, etc.)
3. **Link issues**: Reference issue/PR numbers
4. **Clear descriptions**: Write for end users, not developers
5. **Release process**: Move Unreleased items to new version section

## Git Hooks with Husky

### Pre-commit Hook
```bash
#!/bin/sh
# .husky/pre-commit

# Run linting
pnpm lint-staged

# Run type checking
pnpm type-check

# Verify commit message format
pnpm commitlint --edit
```

### Commit Message Hook
```bash
#!/bin/sh
# .husky/commit-msg

# Validate commit message
pnpm commitlint --edit $1
```

### Pre-push Hook
```bash
#!/bin/sh
# .husky/pre-push

# Run tests
pnpm test

# Check for console.logs
git diff --cached --name-only | xargs grep -l 'console.log' && echo "Remove console.logs before pushing!" && exit 1
```

## Commitizen Setup

### Installation
```bash
# Install commitizen and adapter
pnpm add -D commitizen cz-conventional-changelog @commitlint/cli @commitlint/config-conventional

# Configure commitizen
echo '{ "path": "cz-conventional-changelog" }' > .czrc
```

### Configuration
```json
// package.json
{
  "scripts": {
    "commit": "cz",
    "prepare": "husky install"
  },
  "config": {
    "commitizen": {
      "path": "cz-conventional-changelog"
    }
  }
}
```

### Commitlint Configuration
```javascript
// commitlint.config.js
module.exports = {
  extends: ['@commitlint/config-conventional'],
  rules: {
    'type-enum': [
      2,
      'always',
      [
        'feat', 'fix', 'docs', 'style', 'refactor',
        'perf', 'test', 'build', 'ci', 'chore', 'revert'
      ]
    ],
    'subject-case': [2, 'never', ['sentence-case', 'start-case', 'pascal-case', 'upper-case']],
    'subject-max-length': [2, 'always', 72]
  }
};
```

## Semantic Versioning

### Version Format
```
MAJOR.MINOR.PATCH
```

- **MAJOR**: Breaking changes
- **MINOR**: New features (backwards compatible)
- **PATCH**: Bug fixes (backwards compatible)

### Examples
```bash
# Current version: 1.2.3

# Bug fix: 1.2.4
fix(auth): resolve login timeout issue

# New feature: 1.3.0
feat(payments): add PayPal integration

# Breaking change: 2.0.0
feat(api)!: restructure authentication endpoints
```

## Best Practices

### Commit Practices
- ✅ Make atomic commits (one logical change per commit)
- ✅ Write meaningful commit messages
- ✅ Reference issues in commits
- ✅ Sign commits with GPG when possible
- ❌ Don't commit sensitive data
- ❌ Avoid commits with "WIP" or "temp"

### Branch Practices
- ✅ Keep branches short-lived
- ✅ Regularly sync with base branch
- ✅ Delete merged branches
- ✅ Use protected branches for main/develop
- ❌ Don't commit directly to main
- ❌ Avoid long-running feature branches

### Code Review Practices
- ✅ Review your own code first
- ✅ Keep PRs small and focused
- ✅ Respond to feedback constructively
- ✅ Test locally before approving
- ✅ Use PR templates consistently

### AI-Specific Instructions
When AI assistants create commits:
1. **Always use Conventional Commits format**
2. **Include scope when relevant**
3. **Write descriptive commit bodies for complex changes**
4. **Reference issue numbers when available**
5. **Group related changes into logical commits**
6. **Never use generic messages like "Update files" or "Fix bug"**

Example AI commit workflow:
```bash
# AI should structure commits like this:
git add src/components/Button.tsx
git commit -m "feat(ui): add loading state to Button component

- Add isLoading prop to Button component
- Display spinner when isLoading is true
- Disable button interactions during loading
- Update Button stories with loading examples

Closes #234"
```
